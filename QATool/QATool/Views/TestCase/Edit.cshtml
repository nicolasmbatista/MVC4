@model QATool.Models.TestCase

@{
    ViewBag.Title = "Edit";
}

<h2>@ViewBag.ProjectName - Test Case @Html.DisplayFor(model => model.TestCaseId)</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>TestCase</legend>

        <div class="editor-field">            
            @Html.Hidden("ProjectId")
           
            @Html.ValidationMessageFor(model => model.ProjectId)
        </div>
        
            @Html.Hidden("TestCaseId")
        <div class="editor-label">
            @Html.LabelFor(model => model.Feature)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Feature)
            @Html.ValidationMessageFor(model => model.Feature)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Scenario)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Scenario)
            @Html.ValidationMessageFor(model => model.Scenario)
        </div>

         <div class="editor-label">
            @Html.LabelFor(model => model.Environment)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Environment)
            @Html.ValidationMessageFor(model => model.Environment)
        </div>

        <div class="display-label">
            Steps
        </div>

        <button class="btnAddStep" type="button">Add Step</button>
        <table id="TestCaseSteps">
            <thead>
                <tr>
                    <th>
                        Step
                    </th>
                    <th>
                        Action
                    </th>
                    <th>
                        Expected Result
                    </th>
                    <th>
                        
                    </th>
                </tr>
            </thead>
            <tbody>
                @{
                    ViewBag.i = 0;
                }

                @foreach (var step in Model.Steps)
                {
                    ViewBag.i++;            
                
                    @StepRow(ViewBag.i,step.StepId, step.Action, step.Result)
                    //@Html.Partial("_StepRow", step)
                }
            </tbody>
        </table>
        <div class="editor-label">
            @Html.LabelFor(model => model.Result)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Result)
            @Html.ValidationMessageFor(model => model.Result)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.BugId)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.BugId)
            @Html.ValidationMessageFor(model => model.BugId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Comments)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Comments)
            @Html.ValidationMessageFor(model => model.Comments)
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>        
}

<div>
    @Html.ActionLink("Go Back", "List", "Project", new { projectId = Model.ProjectId }, null)
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval") 
    <script type="text/javascript">    
        
        $('document').ready(function () {
            var i = @(ViewBag.i)
            $.validator.unobtrusive.parseDynamicContent = function (selector) {
                //use the normal unobstrusive.parse method
                $.validator.unobtrusive.parse(selector);

                //get the relevant form
                var form = $(selector).first().closest('form');

                //get the collections of unobstrusive validators, and jquery validators
                //and compare the two
                var unobtrusiveValidation = form.data('unobtrusiveValidation');
                var validator = form.validate();

                $.each(unobtrusiveValidation.options.rules, function (elname, elrules) {
                    if (validator.settings.rules[elname] == undefined) {
                        var args = {};
                        $.extend(args, elrules);
                        args.messages = unobtrusiveValidation.options.messages[elname];
                        //edit:use quoted strings for the name selector
                        
                        $("[name='" + elname + "']").rules("add", args);
                    }else{
                        $.each(elrules, function (rulename, data) {
                            if (validator.settings.rules[elname][rulename] == undefined) {
                                var args = {};
                                args[rulename] = data;
                                args.messages = unobtrusiveValidation.options.messages[elname][rulename];
                                //edit:use quoted strings for the name selector
                                $("[name='" + elname + "']").rules("add", args);
                            }
                        });
                    }
                });
            }
            
            $('.btnAddStep').on('click', function () {
                i++;
                var text = $('#stepTemplate').text();
                var $el = $(text);                
                $el.find('#s_0').attr({ 'id': 's_' + i, 'name': 'Steps[' + i + '].StepId' });
                $el.find('#d_0').html(i);
                $el.find('#d_0').attr({ 'id': 'd_' + i });
                $el.find('#a_0').attr({ 'id': 'a_' + i, 'name': 'Steps[' + i + '].Action' });
                $el.find('#r_0').attr({ 'id': 'r_' + i, 'name': 'Steps[' + i + '].Result' });
                $el.find('#i_0').attr({ 'id': 's_' + i, 'value': i });
                $el.find('#aSpan_0').attr({ 'id': 'aSpan_' + i, 'data-valmsg-for' : 'Steps[' + i + '].Action'});
                $el.find('#rSpan_0').attr({ 'id': 'rSpan_' + i, 'data-valmsg-for': 'Steps[' + i + '].Result' });
                $('#TestCaseSteps').append($el);
                $el.find("input").each(function () {
                        jQuery.validator.unobtrusive.parseElement(this, false);
                        $.validator.unobtrusive.parseDynamicContent(this);
                    }
                );
            });

            $('#TestCaseSteps').on('click', '.btnDelStep', function () {
                $(this).closest('tr').remove();
                i = 1;
                $('#TestCaseSteps').find('div[id^="d_"]').each(function () {
                        $(this).html(i);
                        i++;
                    }
                );
                i--;
            });
        });
    </script>
    <script id="stepTemplate">
        @StepRow(0)
    </script>
}

@helper StepRow(int i, int id = 0, string action = null, string result = null)
{
    <tr>           
        <td>
            <div class="display-label">        
                <input type="hidden" name="Steps.Index" value="@i" id="i_@i" />                                        
                <input type="hidden" id="s_@i" name="Steps[@i].StepId" value="@id"> 
                <div id="d_@i">@i</div> 
            </div>
        </td>
        <td>
            <div class="editor-field">
                <input class="text-box single-line" data-val="true" data-val-required="The Action field is required."  name="Steps[@i].Action" type="text" value="@action" id="a_@i"/>
                <span class="field-validation-valid" data-valmsg-for="Steps[@i].Action" data-valmsg-replace="true" id="aSpan_@i"></span>
            </div>
        </td>
        <td>
            <div class="editor-field">
                <input class="text-box single-line" data-val="true" data-val-required="The Result field is required." name="Steps[@i].Result" type="text" value="@result" id="r_@i"/>
                <span class="field-validation-valid" data-valmsg-for="Steps[@i].Result" data-valmsg-replace="true" id="rSpan_@i"></span>
            </div>
        </td>
        <td>
            <button class="btnDelStep" type="button">X</button>
        </td>
    </tr>
}

